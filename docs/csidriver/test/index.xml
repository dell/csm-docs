<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing Drivers on </title>
    <link>https://dell.github.io/csm-docs/docs/csidriver/test/</link>
    <description>Recent content in Testing Drivers on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://dell.github.io/csm-docs/docs/csidriver/test/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Test PowerFlex CSI Driver</title>
      <link>https://dell.github.io/csm-docs/docs/csidriver/test/powerflex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://dell.github.io/csm-docs/docs/csidriver/test/powerflex/</guid>
      <description>This section provides multiple methods to test driver functionality in your environment.
Note: To run the test for CSI Driver for Dell PowerFlex, install Helm 3.
Test deploying a simple pod with PowerFlex storage Test the deployment workflow of a simple pod on PowerFlex storage.
Prerequisites
In the source code, there is a directory that contains examples of how you can use the driver. To use these examples, you must create a helmtest-vxflexos namespace, using kubectl create namespace helmtest-vxflexos, before you can start testing.</description>
    </item>
    <item>
      <title>Test PowerMax CSI Driver</title>
      <link>https://dell.github.io/csm-docs/docs/csidriver/test/powermax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://dell.github.io/csm-docs/docs/csidriver/test/powermax/</guid>
      <description>This section provides multiple methods to test driver functionality in your environment. The tests are validated using bash as the default shell.
Note: To run the test for CSI Driver for Dell PowerMax, install Helm 3.
The csi-powermax repository includes examples of how you can use CSI Driver for Dell PowerMax. The shell scripts are used to automate the installation and uninstallation of helm charts for the creation of Pods with a different number of volumes in a given namespace using the storageclass provided.</description>
    </item>
    <item>
      <title>Test PowerScale CSI Driver</title>
      <link>https://dell.github.io/csm-docs/docs/csidriver/test/powerscale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://dell.github.io/csm-docs/docs/csidriver/test/powerscale/</guid>
      <description>This section provides multiple methods to test driver functionality in your environment.
Note: To run the test for CSI Driver for Dell PowerScale, install Helm 3.
Test deploying a simple pod with PowerScale storage Test the deployment workflow of a simple pod on PowerScale storage.
Creating a storage class:
Create a file storageclass.yaml using sample yaml file located at samples/storageclass/isilon.yaml. Update/uncomment the attributes in this sample file as per the requirements.</description>
    </item>
    <item>
      <title>Test PowerStore CSI Driver</title>
      <link>https://dell.github.io/csm-docs/docs/csidriver/test/powerstore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://dell.github.io/csm-docs/docs/csidriver/test/powerstore/</guid>
      <description>In the repository, a simple test manifest exists that creates three different PersistentVolumeClaims using default ext4, xfs, and nfs storage classes and automatically mounts them to the pod.
It assumes that you&amp;rsquo;ve created the same basic three storage classes from samples/storageclass folder without changing their names. If you&amp;rsquo;ve created different storage classes please edit tests/simple/simple.yaml and change PersistentVolumeClaim definitions to point to correct storage classes.
Steps
To run this test, run the kubectl command from the root directory of the repository: kubectl create -f .</description>
    </item>
    <item>
      <title>Test Unity XT CSI Driver</title>
      <link>https://dell.github.io/csm-docs/docs/csidriver/test/unity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://dell.github.io/csm-docs/docs/csidriver/test/unity/</guid>
      <description>Test deploying a simple Pod and PVC with Unity XT storage In the repository, a simple test manifest exists that creates three different PersistentVolumeClaims using default NFS and iSCSI and FC storage classes and automatically mounts them to the pod.
Steps
To run this test, run the kubectl command from the root directory of the repository: kubectl create -f ./test/sample.yaml You can find all the created resources in unity namespace.</description>
    </item>
  </channel>
</rss>
