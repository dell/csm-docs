name: Update Main Branch

on:
  workflow_dispatch:  # Allows manual triggering from the GitHub UI

jobs:
  update-version:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the main branch with full history
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0  # Required to create a new branch from the full commit history

      # Step 2: Configure Git user identity for commits
      - name: Set up Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Step 3: Create a new timestamped branch for changes
      - name: Create new branch
        run: |
          BRANCH_NAME="version-update-$(date +%Y%m%d%H%M%S)"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      # Step 4: Run the full version update logic
      - name: Propagate Hugo Content Versions
        run: |
          #!/bin/bash
          set -e

          versions=("docs" "v1" "v2" "v3")

          echo "🚀 Starting version propagation..."

          for ((i=${#versions[@]}-2; i>=0; i--)); do
              src="content/${versions[i]}"
              dest="content/${versions[i+1]}"

              echo "🔄 Updating from $src → $dest"

              if [ ! -d "$src" ]; then
                  echo "❌ Error: Source directory $src does not exist!"
                  exit 1
              fi

              rm -rf "$dest"
              mkdir -p "$dest"
              cp -r "$src/." "$dest/" || echo "⚠️ Warning: No files copied from $src"
              echo "✅ Copied contents from $src to $dest"

              find "$dest" -type f -exec sed -i "s#\\(\\S*\\)(${versions[i]}/#\\1(${versions[i+1]}/#g" {} +
              find "$dest" -type f -exec sed -i "s#\\(\\S*\\)content/${versions[i]}/#\\1content/${versions[i+1]}/#g" {} +
              find "$dest" -type f -exec sed -i "s/{{< version-${versions[i]}\\b/{{< version-${versions[i+1]}/g" {} +

              echo "🛠️ Updated references in $dest from ${versions[i]} to ${versions[i+1]}"

              git diff --stat "$dest" || echo "ℹ️ No changes detected in $dest"

              shortcode_src="layouts/shortcodes/version-${versions[i]}.html"
              shortcode_dest="layouts/shortcodes/version-${versions[i+1]}.html"

              if [ -f "$shortcode_src" ]; then
                  cp "$shortcode_src" "$shortcode_dest"
                  echo "✅ Copied shortcode: $shortcode_src → $shortcode_dest"
              else
                  echo "⚠️ Shortcode not found: $shortcode_src (skipping)"
              fi
          done

          index_file="content/v1/_index.md"
          if [ -f "$index_file" ]; then
              echo "📝 Modifying $index_file to add page info block..."

              awk '
              BEGIN {
                  front_matter_count = 0;
                  inserted = 0;
              }
              {
                  print;
                  if ($0 ~ /^---[ \t]*$/) {
                      front_matter_count++;
                      if (front_matter_count == 2 && inserted == 0) {
                          print "";
                          print "{{% pageinfo color=\"dark\" %}}";
                          print "<span><span/>{{< message text=\"6\" >}}";
                          print "{{% /pageinfo %}}";
                          print "";
                          inserted = 1;
                      }
                  }
              }' "$index_file" > temp.md && mv temp.md "$index_file"

              echo "✅ Inserted info block into $index_file"
          else
              echo "⚠️ Warning: $index_file not found. Skipping modification."
          fi

          echo "🎉 Version update completed successfully!"
      # Step 7: Release Folder Management 
      - name: Manage Release Folders and Bump Version
        run: |
          #!/bin/bash
          versions=("docs" "v1" "v2" "v3")

          for version in "${versions[@]}"; do
            release_dir="content/$version/release"

            if [ -d "$release_dir" ]; then
              echo "📁 Found release folder in $version"

              version_files=($(ls "$release_dir" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+\.md$' | sort -V))

              if [ ${#version_files[@]} -eq 0 ]; then
                echo "⚠️ No version files found in $release_dir"
                continue
              fi

              oldest_version_file="${version_files[0]}"
              echo "🗑️ Deleting oldest version file: $oldest_version_file"
              rm "$release_dir/$oldest_version_file"

              if [ "$version" == "docs" ]; then
                latest_version_file="${version_files[-1]}"
                latest_version="${latest_version_file%.md}"
                IFS='.' read -r major minor patch <<< "${latest_version#v}"
                new_minor=$((minor + 1))
                new_version="v$major.$new_minor.0"
                new_file="$release_dir/$new_version.md"

                echo "📄 Creating new version file: $new_file from $latest_version_file"
                cp "$release_dir/$latest_version_file" "$new_file"
                sed -i "s/$latest_version/$new_version/g" "$new_file"
                echo "✅ Created $new_file"
              fi
            else
              echo "ℹ️ No release folder in $version, skipping."
            fi
          done

          version_folders=("docs" "v1" "v2")

          for ((i=0; i<${#version_folders[@]}; i++)); do
              current_folder="${version_folders[i]}"
              next_folder="${version_folders[i+1]}"
              release_path="content/${current_folder}/release"

              if [ -d "$release_path" ]; then
                  echo "📁 Processing $release_path"
                  mapfile -t version_files < <(find "$release_path" -type f -name 'v1.*.*.md')

                  if [ ${#version_files[@]} -eq 0 ]; then
                      echo "⚠️ No versioned files found in $release_path"
                      continue
                  fi

                  latest_file=$(basename "$(printf "%s\n" "${version_files[@]}" | sed 's/.*\///' | sort -V | tail -n1)")
                  echo "🆕 Skipping latest version file: $latest_file"

                  for file in "${version_files[@]}"; do
                      filename=$(basename "$file")
                      if [[ "$filename" != "$latest_file" ]]; then
                          echo "🔄 Updating paths in $filename"
                          sed -i "s#content/v2/#content/v3/#g" "$file"
                          sed -i "s#content/v1/#content/v2/#g" "$file"
                          sed -i "s#content/docs/#content/v1/#g" "$file"
                          echo "✅ Updated $file"
                      else
                          echo "⏭️ Skipped $filename (latest version)"
                      fi
                  done

                  echo "⚖️ Assigning weights in release files..."
                  sorted_files=($(printf "%s\n" "${version_files[@]}" | sort -V))
                  reversed_files=()
                  for ((idx=${#sorted_files[@]}-1; idx>=0; idx--)); do
                      reversed_files+=("${sorted_files[idx]}")
                  done

                  weight=1
                  for file_path in "${reversed_files[@]}"; do
                      echo "⚖️ Updating weight to $weight in: $file_path"
                      awk -v new_weight="$weight" '
                      BEGIN { inside_front_matter = 0; updated = 0 }
                      {
                          if ($0 ~ /^---[[:space:]]*$/) {
                              inside_front_matter++
                          }

                          if (inside_front_matter == 1 && $0 ~ /^weight:/) {
                              print "weight: " new_weight
                              updated = 1
                          } else {
                              print
                          }

                          if ($0 ~ /^---[[:space:]]*$/ && inside_front_matter == 2 && !updated) {
                              print "weight: " new_weight
                          }
                      }' "$file_path" > tmp.md && mv tmp.md "$file_path"

                      ((weight++))
                  done
              else
                  echo "🚫 No release folder in $current_folder, skipping."
              fi
          done

          echo "🎉 Release folder cleanup, new version creation, and reference update complete!"

      # Step 6: Commit and push changes to the new branch
      - name: Commit and push changes
        run: |
          git add .
          git commit -m "Automated version update"
          git push origin $BRANCH_NAME

      # Step 7: Create a pull request back to main
      - name: Create Pull Request
        run: |
          gh pr create --title "Automated Version Update" \
                       --body "This PR updates the project version automatically." \
                       --base main \
                       --head $BRANCH_NAME
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}  # Ensure you store this token in GitHub secrets
