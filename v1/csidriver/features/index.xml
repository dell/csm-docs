<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Features on </title>
    <link>https://dell.github.io/csm-docs/v1/csidriver/features/</link>
    <description>Recent content in Features on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://dell.github.io/csm-docs/v1/csidriver/features/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PowerFlex</title>
      <link>https://dell.github.io/csm-docs/v1/csidriver/features/powerflex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://dell.github.io/csm-docs/v1/csidriver/features/powerflex/</guid>
      <description>Volume Snapshot Feature The CSI PowerFlex driver versions 2.0 and higher support v1 snapshots.
In order to use Volume Snapshots, ensure the following components are deployed to your cluster:
Kubernetes Volume Snapshot CRDs Volume Snapshot Controller Volume Snapshot Class Installation of PowerFlex driver v1.5 and later does not create VolumeSnapshotClass. You can find a sample of a default v1 VolumeSnapshotClass instance in samples/volumesnapshotclass directory. If needed, you can install the default sample.</description>
    </item>
    <item>
      <title>PowerMax</title>
      <link>https://dell.github.io/csm-docs/v1/csidriver/features/powermax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://dell.github.io/csm-docs/v1/csidriver/features/powermax/</guid>
      <description>Multi Unisphere Support Starting with v1.7, the CSI PowerMax driver can communicate with multiple Unisphere for PowerMax servers to manage multiple PowerMax arrays. In order to use this feature, you must install CSI PowerMax ReverseProxy in StandAlone mode with the driver. For more details on how to configure the driver and ReverseProxy, see the relevant section here
Volume Snapshot Feature The CSI PowerMax driver version 1.7 and later supports v1 snapshots.</description>
    </item>
    <item>
      <title>PowerScale</title>
      <link>https://dell.github.io/csm-docs/v1/csidriver/features/powerscale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://dell.github.io/csm-docs/v1/csidriver/features/powerscale/</guid>
      <description>Multicluster support You can connect a single CSI-PowerScale driver with multiple PowerScale clusters.
Pre-Requisites:
Creation of secret.yaml with credentials related to one or more Clusters. Creation of (at least) one Storage class for each cluster. Creation of custom-volumesnapshot classes with proper isiPath matching corresponding storage classes. Inclusion of cluster name in volume handle, if you want to provision existing static volumes. Consuming existing volumes with static provisioning You can use existing volumes from the PowerScale array as Persistent Volumes in your Kubernetes, perform the following steps:</description>
    </item>
    <item>
      <title>PowerStore</title>
      <link>https://dell.github.io/csm-docs/v1/csidriver/features/powerstore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://dell.github.io/csm-docs/v1/csidriver/features/powerstore/</guid>
      <description>Creating volumes and consuming them Create a file simple.yaml using sample yaml files located at tests/simple/
This command creates a statefulset that consumes three volumes of default storage classes
kubectl create -f tests/simple/simple.yaml After executing this command 3 PVC and statefulset are created in the testpowerstore namespace. You can check created PVCs by running kubectl get pvc -n testpowerstore and check statefulset&amp;rsquo;s pods by running kubectl get pods -n testpowerstore</description>
    </item>
    <item>
      <title>Unity XT</title>
      <link>https://dell.github.io/csm-docs/v1/csidriver/features/unity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://dell.github.io/csm-docs/v1/csidriver/features/unity/</guid>
      <description>Creating volumes and consuming them Create a file sample.yaml using sample yaml files located at test/sample.yaml
The following command creates a statefulset that consumes three volumes of default storage classes:
kubectl create -f test/sample.yaml After executing this command 3 PVC and statefulset are created in the unity namespace. You can check created PVCs by running kubectl get pvc -n unity and check statefulset&amp;rsquo;s pods by running kubectl get pods -n unity command.</description>
    </item>
  </channel>
</rss>
